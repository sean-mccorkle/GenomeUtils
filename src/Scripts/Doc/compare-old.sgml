<!-- This is a linuxdoc-sgml file which generates compare.man,
     compare.html, compare.tex, compare.txt, compares.ps.
-->

<!doctype linuxdoc system>

<manpage>
<sect>compare
<sect1>NAME
<p>
<tt/compare/
<sect1>SYNOPSIS
<p>
<tt/compare/ <em/old getlocs file/ <em/new getlocs file/
<p>

<sect1>DESCRIPTION
<p>
This program compares <bf>getlocs</bf> outputs from two of a projects
<bf/splice/ assemblies that have been made at different times.
Typically, <bf/mat/ numbers assigned by <bf/splice/ are 
highly sensitive to the details of the input sequences, making
comparison difficult because many otherwise unchanged mats will 
receive different numbers in the assembly.
<bf/compare/ reassigns mat numbers in the new getcmnts file to reflect
similarities and differences between the new and old assemblies.

While the <bg/getlocs/ files contain much assembly information,
<bf/compare/ simply considers mats sets of sequences and analyzes
old and new assemblies by examining set memberships.
Sequences are considered the same if and only if their <bf/gel-lane/
designations are the same --- All other name information is disregarded.
If a sequence has been determined to be a chimera and has been
split into two new sequences with <em/a/ and <em/b/ extensions,
the sequences are considered <em/different/ from the original.

<bf/compare/ detects the following relationships between old and new mats:

<itemize>
<item><bf/equivalences/
      <p>
      A mat in the old assembly and a mat in the new assembly are considered
      <em/equivalent/ if they both have exactly the same set of sequences
      (barring sequences which have been removed from or added to the project
      in the time between the two assemblies).
<item><bf/fusions/
      <p>
      A mat in the new assembly is a <em/fusion/ of two or more mats 
      in the old assembly if and only if the sequence set of the new mat is
      exactly the sum of the sequence sets in the old mats (again, disregarding
      sequences which have been removed from or added to the project after
      the time of the old assembly).
<item><bf/fissions/
      <p>
      A mat from the old assembly <em/fissions/ into two or more mats
      in the new assembly if and only if the sequence set of the old mat is
      exactly the sum of the sequence sets in the mats (once again, 
      disregarding sequences that have been removed from or added to 
      the project after the old assembly).
<item><bf/appearances/
      <p>
      A mat in the new assembly <em>appears</em> if none of its member
      sequences are present <em>anywhere</em> in the old assembly 
      (i.e. if all of its sequences have been added after the old assembly 
      was made).
<item><bf/disappearances/
      <p>
      A mat in the old assembly <em>disappears</em> if none of its member
      sequences are present <em>anywhere</em> in the new assembly (i.e.
      if all its sequences have been removed after the old assembly was made).
<item><bf/complexes/
      <p>
      These are combinations of partial fusions and fissions.
      Basically, these are mats which do not fall into any of the above
      categories.
      A mat from the old assembly is either completely <em/contained/ by
      a single mat in the new assembly, or <em/splits/ into two or more
      mats in the new assembly.
</itemize>

<sect2>Mat Renaming
<p>
A <em/new/ version of the new <em/getcmnts/ file is generated with mats
renamed to relate it to the old assembly.
The following rules are used:
<itemize>
<item>If a new mat is <em/equivalent/ to an old mat, it takes the old mat 
      name.
<item>If a new mat is a <em/fusion/ of several old mats,
      it take the name of the old mat which occupies the first 
      position in the new mat.
<item>If an old mat <em/fissions/ into several new mats, the 
      ``fission product'' mats are sorted by their relative positions within 
      the old mat and are given the old mat name with the suffixes <em/a/, 
      <em/b/, <em/c/, ..., etc.  For example, if <tt/block23/ fissions
      into three mats, the mats will be renamed <tt/block23a/, <tt/block23b/,
      and <tt/block23c/, according to their positional order in <tt/block23/.
<item>If a mat <em/appears/ in the new assembly (that is, if it's completely
      composed of  new sequences), it is given the name 
      <tt/new/<em/n/ where <em/n/ is a sequentially assigned number (i.e.
      the first such mat will be <tt/new1/, the 2nd <tt/new2/, etc.).
<item>Complexes are handled as combinations of fusions and fissions.
      If an old mat splits into more than one mat in the new assembly,
      the split components are treated like fission products and assigned 
      the old mat name with <em/a/, <em/b/, etc. suffixes.
      If an old mat is completely contained within a new mat, it's component 
      keeps the old mat name.
      If a mat in the new is exactly one of the old components, it takes that 
      component name.
      If it is a fusion of components from the old assembly, it takes the
      name of the component which occupies the first position in the new mat.
</itemize>

<sect2>Operating Details
<p>
<em/compare/ is a driver which runs a series of prolog programs 
that perform various steps in the comparison process.

<enum>
<item>Each <bf/getcmnts/ file is translated into a series of
      prolog facts.
<item>These files are concatenated.
<item>The combined fact file is compiled (slow).
<item>The mat files are analyzed for equivalences, fusions, fissions,
      and complexes
<item>An analysis report is generated.
<item>A name mapping is generated for the new assembly.
<item>A renamed version of <em/new-getcmnts/ is generated.
</enum>

Since the prolog sub-programs are somewhat slow, the <em/compare/
script examines dates of all of the input and output files, and only
creates intermediate files when they are out of date.

<sect2>Output Files
<p>
<descrip>
<tag><tt>getcmnts.p<em/n1/_<em/m1/-<em/d1/.P</tt></tag>prolog
             translation of old getcmnts file.
<tag><tt>getcmnts.p<em/n2/_<em/m2/-<em/d2/.P</tt></tag>prolog
             translation of new getcmnts file.
<tag><tt><em/m1/-<em/d1/p<em/n1/_<em/m2/-<em/d2/p<em/n2/.P</tt></tag>
             combined prolog data file (concatention of above two files)
<tag><tt><em/m1/-<em/d1/p<em/n1/_<em/m2/-<em/d2/p<em/n2/.O</tt></tag>
             compiled combined prolog data file.
<tag><tt>mapping_<em/m1/-<em/d1/p<em/n1/_<em/m2/-<em/d2/p<em/n2/.P</tt></tag>
             analysis results (prolog facts).
<tag><tt>mapping_<em/m1/-<em/d1/p<em/n1/_<em/m2/-<em/d2/p<em/n2/.O</tt></tag>
             analysis results (compiled prolog facts).
<tag><tt>mapping_<em/m1/-<em/d1/p<em/n1/_<em/m2/-<em/d2/p<em/n2/.eng</tt></tag>
             analysis results (english).
<tag>remaining.P</tag>
             Any mats which did not fit into the expected categories.
             This should be empty.
<tag><tt>getcmnts.p<em/n2/_<em/m2/-<em/d2/.<em/m1/-<em/d1/p<em/n1/</tt></tag>
             new getcmnts file with mat names modified to reflect relationships
             with old getcmnts file
</descrip>

<sect1>AVAILABILITY
<p>
Currently, only on 
<url url="http://genome5.bio.bnl.gov/Software/Local/" name="genome5">
<p>
Work is currently in progress on porting to ospa, ospb and genome1.
<sect2>Files
<p>
<descrip>
<tag>/usr/local/seq/bin/compare</tag> driver script
<tag>/usr/local/seql/lib/xsb/io.P</tag> io predicates
<tag>/usr/local/seql/lib/xsb/trans.P</tag> getcmnts to prolog data translator
<tag>/usr/local/seql/lib/xsb/gc3.P</tag> analysis program
<tag>/usr/local/seql/lib/xsb/explain_mapping.P</tag> report generator
<tag>/usr/local/seql/lib/xsb/rename.P</tag> getcmnts renaming program
</descrip>


<sect1>CAVEATS
<p>
Highly untested.
<p>
There's still some trouble tuning the memory allocation for genome5 -
XSB may refuse to run because it can't get enough core.
<p>
The current version does not recognize mat names like block11a or new1.
It therefore will not accept one of it's own output files as input.
This can be fixed if necessary.

<verb>
$Revision: 1.2 $
$Date: 1996/12/20 00:00:37 $
</verb>

</manpage>
