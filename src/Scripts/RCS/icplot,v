head	1.3;
access;
symbols;
locks
	mccorkle:1.3; strict;
comment	@# @;


1.3
date	2003.07.23.19.52.24;	author mccorkle;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.22.15.22.18;	author mccorkle;	state Exp;
branches;
next	1.1;

1.1
date	2002.03.21.03.13.24;	author mccorkle;	state Exp;
branches;
next	;


desc
@Plotting interface for ic program.
@


1.3
log
@added -y, -Y and -F options to control y range, y label and appending
a possible function - mostly this is all for whsolu output.
@
text
@#!/usr/bin/perl
# Program:      icplot
# Programmer:   Sean R. McCorkle
# Language:     perl
#
# Description:  This accepts input from the ic program, and creates a 
#               graph (.png) of the itegrated charge profiles.  
#               This uses gnuplot for the actual plot generation.
#
# Usage:        ic [opts] [files] | icplot [-c]
#
#               output goes directly to stdout
#
#                -c      generate color plot (otherwise black & white)
#                -y a,b  set yrange [a:b]
#                -Y str  set ylabel str
#                -F func   plot this function as well as data
# 
# $Id: icplot,v 1.2 2002/03/22 15:22:18 mccorkle Exp mccorkle $
#
#
use  Getopt::Std;

getopts( 'cF:y:Y:' ) || die "Bad option\n";

$ENV{'PATH'} .= ':/usr/bin:/usr/local/bin';   # for gnuplot

$tfile_base = "/tmp/icplotT$$";

$options = <>;  # get options line
#
#  First split up the input proteins into seperate files in /tmp
#  We'll accumulate the /tmp file names in @@tfiles, and we'll save
#  the "# seq-heading" lines for each, in the hash %names, and that
#  way we can have a nice key for each trace in the plot.
#
while ( <> )
   {
    if ( /^\#(.*)/ )
      {
       $n = $1;
       close( TFILE ) if ( $tfile );
       $i++;
       $tfile = "$tfile_base.$i";
       push( @@tfiles, $tfile );
       $name{$tfile} = $n;
       open( TFILE, ">$tfile" ) || die "Can't open $tfile for writing\n";
      }
    print TFILE;
   }
close( TFILE ) if ( $tfile );


#
#  Now lets open up a pipe to gnuplot and feed in commands to plot
#  these /tmp files
#
open( GNUPLOT, "|gnuplot" ) || die "Can't run gnuplot!\n";

if ( $options =~ /^\# 1/ )
   { $xaxis = "% protein length"; }
else 
   { $xaxis = "position (aa)"; }
$color = $opt_c ? "color" : "";

print GNUPLOT <<EndOfPreamble;
set terminal png $color
set data style line
set xlabel "$xaxis"
EndOfPreamble

print GNUPLOT "set ylabel  \"", ($opt_Y ? $opt_Y : "Integrated Charge"), 
               "\"\n";


if ( $opt_y =~ /,/)
   {
    ($y1,$y2) = split( /,/, $opt_y );
    print GNUPLOT "set yrange [$y1:$y2]\n";
   }

print GNUPLOT 
     "plot ",
      join( ", ", 
            map( ("\"$_\" title \"" . $name{$_} . "\""), @@tfiles )
          ),
     ( $opt_F ? ",$opt_F" : "" ),
     "\n";

close( GNUPLOT );

unlink ( @@tfiles );    # don't forget to remove the temp files
@


1.2
log
@added some comments
@
text
@d14 4
a17 1
#                -c means generate color plot (otherwise black & white)
d19 1
a19 1
# $Id: icplot,v 1.1 2002/03/21 03:13:24 mccorkle Exp mccorkle $
d24 1
a24 1
getopts( 'c' ) || die "Bad option\n";
a68 1
set ylabel "Integrated Charge"
d72 10
d87 1
@


1.1
log
@Initial revision
@
text
@d6 3
a8 2
# Description:  this creates a graph (.png) of the itegrated charge 
#               profiles from ic.
d16 2
a17 1
# $Id$
a18 1

d29 4
a32 1
#  First, split any multiple input plots into seperate files in /tmp
d51 4
a54 2

#open( GNUPLOT, ">&STDOUT" );
d79 1
a79 1
unlink ( @@tfiles );
@
