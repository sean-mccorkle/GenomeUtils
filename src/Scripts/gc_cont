#!/usr/bin/perl
# Program:      gc_cont
# Programmer:   Sean R. McCorkle
#               Biology Department, Brookhaven National Laboratory
# Language:     perl
# Description:  Reads DNA sequence, prints out G/C content either in a 
#               traveling window, or total for each sequence, or total for
#               all sequences.
#
# Usage:        gc_cont [-w <n>] [-T] [-G] [ <fasta file> ... ]
#
#               a single hyphen (-) can be used as a file name to specify
#               stdin.  If no files are specified, stdin is scanned.
#
# Options:
#               -w <n>   travelling window of size <n> (default 10)
#               -T       total for each sequence
#               -G       Grand total for all sequences
#               -t       use tag (short n-mer) file input rather than 
#                        fasta sequences.  Column 1 is assumed to be the tag,
#                        other columns are passed through
#
# $Id: gc_cont,v 0.3 2003/05/13 19:48:11 mccorkle Exp mccorkle $
#
use  Getopt::Std;

select( ( select(STDOUT), $| = 1 )[0] );
select( ( select(STDERR), $| = 1 )[0] );

die "bad option\n" unless ( getopts( 'tw:GT' ) );

$window = ($opt_w ? $opt_w : 10 );

if ( $opt_t )
   {
    while ( <> )
       {
        /^\s*([A-Z]+)(\s*(.*))?$/i || die "didn't find a reasonable tag: $_\n";
        ($seq,$hdr) = (lc( $1 ), $3 );
        process();
       }
   }
else
   {
    while ( <> )
       {
        chomp;
        if ( s/^>// )
           {
            $new_hdr = $_ ? $_ : " ";
            process() if ( $seq );
            $hdr = $new_hdr;
            $seq = "";
           }
        else
           {
            s/\s//g;            # squeeze blanks
            s/^\d+//;           # remove optional leadning numbers
           $seq .= lc( $_ );   # append to sequence
           }
       }
   }

process() if ( $seq && ! $opt_t );

if ( $opt_G )
   {
    printf "%10.2f %10.2f   %10d %10d %10d\n", 
            div( $total_gc, $total_n ), div( $total_at, $total_n ), 
            $total_gc, $total_at, $total_n;
   }

sub  process
   {
    my $gc, $at, $n, $i;
    #print ">$hdr\n" unless( $opt_t || $opt_G );
    print "$hdr" unless( $opt_t || $opt_G );

    if ( $opt_t || $opt_T || $opt_G )
        {
         $n = length( $seq );
         my ( $gc, $at ) = calc( $seq );
         printf "%10.2f %10.2f   %10d %10d %10d ", 
                div( $gc, $n ), div( $at, $n ), $gc, $at, $n unless( $opt_G );
         print " $seq $hdr" if ( $opt_t );
         print "\n" unless( $opt_G );
         $total_gc += $gc;
         $total_at += $at;
         $total_n  += $n;
        }
    else
        {
         $n = length( $seq ) - $window + 1;
         for ( $i = 0; $i < $n; $i++ )
            {
             ( $gc, $at ) = calc( substr( $seq, $i, $window ) );
             printf "%10.2f %10.2f\n", div( $gc, $window ),
                                       div( $at, $window );
            }
        }
   }

# calc( $seq ) - returns ( n_gc's, n_at's);

sub calc 
   {
    my $s = shift;
    my $n = length( $s );
    my ( $gc, $at ) = ( 0, 0 );
    #print "Calc: [$s] $n\n";
    for ( $i = 0; $i < $n; $i++ )
       {
        my $c = substr( $s, $i, 1 );
        #print "           $i $c\n";
        $gc++ if ( $c eq 'g' || $c eq 'c' );
        $at++ if ( $c eq 'a' || $c eq 't' );
       }
    #print "gc = $gc, at = $at\n";
    return( $gc, $at );
   }

sub  div
   {
    my ( $x, $n ) = @_;

    return( $n == 0 ?  -1.0  : ( (100.0 * $x) / $n ) );
   }
