head	0.5;
access;
symbols;
locks
	mccorkle:0.5; strict;
comment	@# @;


0.5
date	2000.02.28.17.37.04;	author mccorkle;	state Exp;
branches;
next	0.4;

0.4
date	99.12.15.15.27.37;	author mccorkle;	state Exp;
branches;
next	0.3;

0.3
date	99.10.20.00.27.57;	author mccorkle;	state Exp;
branches;
next	0.2;

0.2
date	99.10.13.18.12.53;	author mccorkle;	state Exp;
branches;
next	0.1;

0.1
date	99.10.13.18.10.38;	author mccorkle;	state Exp;
branches;
next	;


desc
@DNA start/stop coding signal finder.
@


0.5
log
@whoops - had to handle lower case chars.
@
text
@# Program:      signals.icn
# Programmer:   Sean R. McCorkle
# Language:     Icon
# Description:  Reads a sequence file (fasta format), finds starts and stops
#               in all six reading frames, and writes them out in graph
#               their frequencies, and  ORFs in all reading frames.
#
#               Reading frames are designated:
#
#                     F1 - forward (top) strand, starting at 1
#                     F2 - forward (top) strand, starting at 2
#                     F3 - forward (top) strand, starting at 3
#                     R1 - reverse (bottom) strand, starting at 1 from the end
#                     R2 - reverse (bottom) strand, starting at 2 from the end
#                     R3 - reverse (bottom) strand, starting at 3 from the end
#
#               ORFs and their lengths do not include the stops.
#               Positions start at 1.
#
# Usage:        signals <seq file>
#
#               where <seq file> contains a single DNA sequence (fasta).
#               If not specified, stdin is used.   Each start stop causes
#               a "view" program graphics instruction line to be output on 
#               stdout.
#
# Note:         This just works on one sequence.  Couldn't imagine why you
#               want to work on more than one at once.
# 
#
# $Id: signals.icn,v 0.4 1999/12/15 15:27:37 mccorkle Exp mccorkle $
#

link  io

global color_table
global starts
global stops
            
procedure main( args )

    local infile, s, signal, dir, i, fseq, codon, y1, y2, f

    initialize()

    infile := open_file( (*args > 0 & args[1]) | "-" )
 
    fseq := read_fasta( infile )
    s := table()
    s["F"] := map( fseq.seq, &lcase, &ucase )
    s["R"] := rc( s["F"] )
    write( "# Start/stop signals, sequence: ", fseq.heading )
    write( "# Generated by signals, $Revision: 0.4 $" )
    write( "tiers 3 3 20 20" )
    write( "scale 0 ", *s["F"] )
    write( " " )


    every dir := ( "F" | "R" ) do
        every i := find( ( !starts | !stops ), s[dir] ) do
           {
            f := ((i-1) % 3 ) + 1
            codon := (s[dir])[i+:3]
            if  member( starts, codon )
              then signal := "start"
              else signal := "stop"
            if ( dir == "R" )             # convert to
              then i := *s[dir] + 2 - i   # leftmost end
            y1 := 0.0
            y2 := 0.5
            if ( signal == "start" ) 
              then { 
                    y1 := 0.5
                    y2 := 1.0
                   }
            if ( dir == "R" ) 
              then f := -f
            write( "t_vline ", f, " ", i, " ", y1, " ", y2, " ", 
                   color_table[ codon ], "  # ", signal, "  ", codon )
           }

end


procedure initialize()

    starts := set( [ "ATG", "GTG", "TTG" ] )
    stops  := set( [ "TAA", "TGA", "TAG" ] ) 

    color_table := table( "black" )
    color_table[ "TAA" ] := "purple"
    color_table[ "TAG" ] := "grey"
    color_table[ "TGA" ] := "red"
    color_table[ "ATG" ] := "green"
    color_table[ "GTG" ] := "orange"

    color_table[ "TTG" ] := "blue"

end











@


0.4
log
@now view.icn handles symmetric y coordinates in tiers by default, so
thats removed from this program, and TAG stops are now colored "grey"
because "brown" was too similar to orange.
@
text
@d31 1
a31 1
# $Id: signals.icn,v 0.3 1999/10/20 00:27:57 mccorkle Exp mccorkle $
d50 2
a51 2
    s["F"] := fseq.seq
    s["R"] := rc( fseq.seq )
d53 1
a53 1
    write( "# Generated by signals, $Revision: 0.3 $" )
@


0.3
log
@added TTG (blue) starts, and fixed handling for filter mode (no filename
on command line causes stdin to be read.
@
text
@d27 5
a31 1
# $Id: signals.icn,v 0.2 1999/10/13 18:12:53 mccorkle Exp mccorkle $
d53 1
a53 2
    write( "# Generated by signals, $Revision: 0.2 $" )
    write( "window 800 300 ", fseq.heading )    
d77 1
a77 5
              then { 
                    y1 := 1.0 - y1
                    y2 := 1.0 - y2
                    f := -f
                   }
d92 1
a92 1
    color_table[ "TAG" ] := "brown"
@


0.2
log
@cosmetic changes.
@
text
@d27 1
a27 1
# $Id: signals.icn,v 0.1 1999/10/13 18:10:38 mccorkle Exp mccorkle $
d42 1
a42 1
    infile := open_file( args[1] )
d49 1
a49 1
    write( "# Generated by signals, $Revision$" )
d88 1
a88 1
    starts := set( [ "ATG", "GTG" ] )
d98 2
d101 11
@


0.1
log
@Just extracted this as a single "operator" from scanseq
@
text
@d27 1
a27 1
# $Id$
d48 2
a49 2
    write( "# signals v$Revision$    sequence: ", fseq.heading )
    write( "# " )
@
