head	0.2;
access;
symbols;
locks
	mccorkle:0.2; strict;
comment	@# @;


0.2
date	2000.03.24.17.46.23;	author mccorkle;	state Exp;
branches;
next	0.1;

0.1
date	99.11.06.23.26.33;	author mccorkle;	state Exp;
branches;
next	;


desc
@Generator of random DNA and protein sequences, for testing and
diagnostics
@


0.2
log
@reworked handling of opts to make use of \ operator rather than testing
member() all the time.
@
text
@# Program:      ranseq
# Programmer:   Sean R. McCorkle
# Language:     Icon
# Description:  Generate random DNA and AMINO acid sequences.
#
# Usage:        ranseq [-a <n>] [-b <n>] [-n <n>] [-dhpv]
#
# Options:
#
#               -a <n>   minimum sequence size, inclusive  (default 100)
#               -b <n>   maximum sequence size, inclusive  (default 1000)
#               -d       don't randomize seed using time & date
#                        (will produce repeatable results)
#               -h       print help, then exit
#               -n <n>   generate <n> sequences (default: 1)
#               -p       generate protein (amino acid) sequences instead of
#                        DNA sequences 
#               -v       print version, then exit
#
# Ideas for the future:
#               1) option to add N or X to character set
#               2) non-flat distributions
#
# $Id: ranseq.icn,v 0.1 1999/11/06 23:26:33 mccorkle Exp mccorkle $
#

link  io
link  options      # uses options.icn from the Icon Program Library
link  random       # and random.icn from the Icon Program Library

                      ###############################
                      # Output Control globals,     #
                      # set by command line options #
                      ###############################

global num_seqs      # number of sequences to generate, default 1, set by -n
global min_length    # min length of generated sequence,                  -a
global max_length    # min length of generated sequence,                  -a
global alphabet      # nucleotides or amino acids, default nucleotides    -p

                             ################
                             # Main Program #
                             ################


procedure main( args )

    local opts, n, offset

    opts := options( args, "-a+ -b+ -d -h -n+ -p -v", opt_err )
    handle_opts( opts )

    n := (max_length - min_length ) + 1
    offset := min_length - 1

    every i := 1 to num_seqs do
        generate_seq( i, (?n) + offset )


end

procedure  generate_seq( i, len, chars )

    local s
    s := ""
    every 1 to len do
        s ||:= ?alphabet
    write_fasta( &output, s, i || "-" || len )

end

#
# set globals and take actions according to what's present in the opts
# table.
#
# Note: should put checks on values of -a, -b and -n
#
procedure handle_opts( opts )

    if member( opts, "h" )  then { help(); exit() }
    if member( opts, "v" )  then { version(); exit() }

    if not member( opts, "d" )  then randomize()

    num_seqs := ( \opts["n"] | 1 )
    min_length := ( \opts["a"] | 100 )
    max_length := ( \opts["b"] | 1000 )

    alphabet := "ACGT"
    if member( opts, "p" )  then  alphabet := "AVLIWFMPGSTYCNQKRHDE"

end

#
# print version number & help
#

procedure help()

    version()
    write( "\nUsage:  ranseq [-a <n>] [-b <n>] [-n <n>] [-hpv]\n" )
    write( "Options:" )
    write( "        -a <n>   minimum sequence size, inclusive  (default 100)" )
    write( "        -b <n>   maximum sequence size, inclusive  (default 1000)")
    write( "        -d       don't randomize seed using time & date" )
    write( "                 (will produce repeatable results)" )
    write( "        -h       print help, then exit" )
    write( "        -n <n>   generate <n> sequences (default: 1)" )
    write( "        -p       generate protein (amino acid) sequences instead ")
    write( "                 of DNA sequences " )
    write( "        -v       print version, then exit" )

end

#
# print version number
#
procedure version()

    "$Revision: 0.1 $" ? { tab( upto( ' ' ) )
                           write( "ranseq", tab( many( &digits ++ ' .' ) ),
                                  " Generate random DNA or Protein sequences"
                                )
		         }
end

#
# slightly more informative option error message
#
procedure opt_err( msg )

   write( &errout, "ranseq: ", msg, "  (type ranseq -h for help)" )
   exit( 1 )
end


@


0.1
log
@Well, I'm already happy with this.  Lets check it in.
@
text
@d11 1
a11 1
#               -b <n>   maximu sequence size, inclusive  (default 1000)
d24 1
a24 1
# $Id$
d85 3
a87 8
    num_seqs := 1
    if member( opts, "n" )  then  num_seqs := opts["n"]

    min_length := 100
    if member( opts, "a" )  then  min_length := opts["a"]

    max_length := 1000
    if member( opts, "b" )  then  max_length := opts["b"]
d104 1
a104 1
    write( "        -b <n>   maximu sequence size, inclusive  (default 1000)" )
d120 1
a120 1
    "$Revision: 0.0 $" ? { tab( upto( ' ' ) )
@
