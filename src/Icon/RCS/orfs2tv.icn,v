head	0.6;
access;
symbols;
locks
	mccorkle:0.6; strict;
comment	@# @;


0.6
date	2000.03.24.15.48.36;	author mccorkle;	state Exp;
branches;
next	0.5;

0.5
date	2000.01.26.18.51.46;	author mccorkle;	state Exp;
branches;
next	0.4;

0.4
date	2000.01.06.20.14.55;	author mccorkle;	state Exp;
branches;
next	0.3;

0.3
date	99.12.15.15.41.41;	author mccorkle;	state Exp;
branches;
next	0.2;

0.2
date	99.11.01.15.09.34;	author mccorkle;	state Exp;
branches;
next	0.1;

0.1
date	99.10.18.15.07.02;	author mccorkle;	state Exp;
branches;
next	;


desc
@converts ORF output from "orfs" and "tras" programs, into horizontal
graphics bar positons for "view" program.
@


0.6
log
@changed name from orfs2map to orfs2tv
used \opt["y"] instead of member.
@
text
@# Program:      orfs2tv
# Programmer:   Sean R. McCorkle
# Language:     Icon
# Description:  Reads concatenated ORF fasta-format dna sequence files output 
#               from either orfs or tras (i.e. tras -d files ) and converts 
#               them to graphics instructions for drawing horizontal lines
#               for the view program.
#               
#               Output from "orfs" & Ping's "tras" program is tranlated into 
#               h_line instructions for "view"  program.
#
# Usage:        orfs2tv [-dhv] [-t <t>] [-y <y>] [<file> ...]
#
#               a single hyphen (-) can be used as a file name to specify
#               stdin.  If no files are specified, stdin is scanned.
#
# Options:
#               -d      generate lpress display actions to identify orf
#               -h      print help
#               -v      print version
#               -t <t>  make horizontal bars <t> pixels thick (real)
#               -y <y>  place horizontal bars at position <y> in tiers (real)
#
# $Id: orfs2tv.icn,v 0.5 2000/01/26 18:51:46 mccorkle Exp mccorkle $
#

link    io
link    math
link    options

record  header( a, b, f, strt )

global  color_table

                             ################
                             # Main Program #
                             ################


procedure  main( args )

    local infile, line, y, thick, maxpos, lbnd

    initialize()
    maxpos := 0

    opts := options( args, "-h -v -d -t. -y.", opt_err )
    if member( opts, "h" )  then { help(); exit() }
    if member( opts, "v" )  then { version(); exit() }
    if member( opts, "t" )
        then { thick := opts["t"]; lbnd := thick / 2.0; }
        else { thick := 0.0; lbnd := 0.1 }
    y := ( \opts["y"] | 0.5 )

    if ( *args = 0 ) then push( args, "-" )   # use stdin if no filenames

    write( "# View graphics instructions, generated by tras2map" )
    write( "# " )

    every infile := open_f( !args ) do
       {
        while ( line := read( infile ) ) do
            if ( line ? match( ">" )  )
              then 
               {
                ( line ? h := (orfs_header() | tras_header()) ) |
                     stop( "bad header line " ||  line )
                if ( h.a > maxpos ) then maxpos := h.a
                if ( h.b > maxpos ) then maxpos := h.b
                if ( thick > 0.0 )
                  then
                    write( "t_rect ", h.f, " ", h.a, " ", h.b, " ", 
                            y - lbnd, " ", y + lbnd, " ",
                            color_table[ h.strt ], " # ", h.strt  )
                  else
                    write( "t_hline ", h.f, " ", h.a, " ", h.b, " ", y, " ",
                            color_table[ h.strt ], " # ", h.strt  )
                if member( opts, "d" )
                    then write( "lpress ", h.f, " ", h.a, " ", h.b, " ",
                                 y - lbnd, " ", y + lbnd,
                                 " display \"", line, "\"" ) 
	       }
        close( infile )
       }
    #
    # t_hline commands are first buffered by view.  The next three are
    # process as they are encountered (or ignored if already sent), so
    # this is a perfectly good way to work
    #

end

procedure open_f( filename )

    local infile

    write( "#### ", filename )
    if filename == "-"
      then infile := &input
      else ( infile := open( filename )  | stop( "can't open ", filename ) )
    return( infile )

end


procedure initialize()

   color_table := table( "black" )
   color_table[ "TAA" ] := "purple"
   color_table[ "TAG" ] := "grey"
   color_table[ "TGA" ] := "red"
   color_table[ "ATG" ] := "green"
   color_table[ "GTG" ] := "orange"

   color_table[ "TTG" ] := "blue"   # wierd starts for  t7, etc

end

procedure orfs_header()

    local dir, f, pos, length, strt

    ( tab( match( ">" ) )  &
              ( dir := tab( any( "RF" ) ) ) &
              f := tab( any( "123" ) ) &
              tab( match( "-" ) ) &
              ( pos := tab( many( &digits ) ) ) &
              tab( match( "-" ) ) &
              ( length := tab( many( &digits ) ) ) &
              tab( match( "-" ) ) &
              ( strt := tab( many( "ACGT" ) ) ) &
              (
                ( ( (dir == "R") & ( f := -f )) | ( f := f ) ) &
                return( header( pos, pos + length, f, strt ) )
               ) )
          | fail
              
           
end

procedure tras_header()

    local a, b, f, strt

      (  tab( match( ">" ) ) &
                 ( a := tab( many( &digits ) ) ) &
                 tab( match( "-" ) ) &
                 ( b := tab( many( &digits ) ) ) &
                 tab( match( "-" ) ) &
                 ( f := tab( any( "123" ) ) ) &
                 ( ( tab( match( "R" ) ) & (f := -f) ) | f := f ) &
                 tab( match( "-" ) ) &
                 ( strt := tab( many( "ACGT" ) ) ) &
                 return( header( a, b, f, strt ) ) )
         | fail 
           
end


#
# print version number & help
#

procedure help()

    version()
    write( "Usage:  orfs2tv [options] [<file> ...]\n" )
    write( "        a single hyphen (-) can be used as a file name to specify")
    write( "        stdin.  If no files are specified, stdin is scanned.\n" )
    write( "Options:" )
    write( "        -d      generate lpress display actions to identify orf" )
    write( "        -h      print help" )
    write( "        -v      print version" )
    write( "        -t <t>  make horizontal bars <t> pixels thick (real)" )
    write( "        -y <y>  place horizontal bars at position <y> in tiers",
                    " (real)" )

end

#
# print version number
#
procedure version()

    "$Revision: 0.5 $" ? { tab( upto( ' ' ) )
                           write( "orfs2tv", tab( many( &digits ++ ' .' ) ) )
		         }
end

#
# slightly more informative option error message
#
procedure opt_err( msg )

   write( &errout, "orfs2tv: ", msg, "  (type orfs2tv -h for help)" )
   exit( 1 )

end


@


0.5
log
@New tview is taking quoted strings, and automatically determines scale and
tiers, so I'm removing them from this output.
@
text
@d1 1
a1 1
# Program:      orfs2map
d12 1
a12 1
# Usage:        orfs2map [-dhv] [-t <t>] [-y <y>] [<file> ...]
d24 1
a24 1
# $Id: orfs2map.icn,v 0.4 2000/01/06 20:14:55 mccorkle Exp mccorkle $
d53 1
a53 3
    if member( opts, "y" )
        then y := opts["y"]
        else y := 0.5
d167 1
a167 1
    write( "Usage:  orfs2map [options] [<file> ...]\n" )
d185 2
a186 2
    "$Revision: 0.4 $" ? { tab( upto( ' ' ) )
                           write( "orfs2map", tab( many( &digits ++ ' .' ) ) )
d195 1
a195 1
   write( &errout, "orfs2map: ", msg, "  (type orfs2map -h for help)" )
@


0.4
log
@Got rid of seperate heights for tras and orfs files.  Now, both are
handled the same way.  The tier y position can now be specified with the
-y option, and the line thickness with the -t option.
@
text
@d24 1
a24 1
# $Id: orfs2map.icn,v 0.3 1999/12/15 15:41:41 mccorkle Exp mccorkle $
d83 1
a83 1
                                 " display ", line ) 
a91 3
    write( "#" )
    write( "tiers 3 3 20 20" )
    write( "scale 0 ", maxpos )
d187 1
a187 1
    "$Revision: 0.3 $" ? { tab( upto( ' ' ) )
@


0.3
log
@added command line options, and now view handles symmetric y coordinates
in tiers, so thats removed from this program.  TAG stop is now colored
grey because brown was too similar to orange.
@
text
@d12 1
a12 1
# Usage:        orfs2map [-dhv] [<file> ...]
d14 2
a15 2
#               if no files are specified, stdin is used.  A single hyphen 
#               can be used as a file name to specify stdin as well.
d17 8
a24 1
# $Id: orfs2map.icn,v 0.2 1999/11/01 15:09:34 mccorkle Exp mccorkle $
d42 1
a42 1
    local infile, line, y, maxpos
d47 1
a47 1
    opts := options( args, "-h -v -d" )
d50 6
d68 2
a69 6
                if line ? ( h := tras_header() )
                  then  y := -0.3
                  else if line ? ( h := orfs_header() )
                          then y := 0.5
                          else stop( "bad header line " ||  line )

d72 8
a79 2
                write( "t_hline ", h.f, " ", h.a, " ", h.b, " ", y, " ",
                       color_table[ h.strt ], " # ", h.strt  )
d82 1
a82 1
                                 y - 0.1, " ", y + 0.1,
d172 1
a172 1
    write( "Usage:  orfs2map [-dhv] [<file> ...]\n" )
d176 6
a181 3
    write( "        -d generate lpress display actions to identify orf" )
    write( "        -h print help" )
    write( "        -v print version" )
d190 2
a191 2
    "$Revision: 0.2 $" ? { tab( upto( ' ' ) )
                           write( "Orfs2map", tab( many( &digits ++ ' .' ) ) )
d195 9
@


0.2
log
@processing multiple files now.
@
text
@d4 4
a7 3
# Description:  Reads concatenated ORF dna sequence files output from either
#               orfs or tras (i.e. tras -d files ) and converts them to a 
#               viewscan file of orfs.
d9 2
a10 1
#               Output from "orfs" program is tranlated into h
d12 1
a12 1
# Usage:        orfs2map [<file> ...]
d14 2
a15 1
#               if no files are specified, stdin is used
d17 1
a17 1
# $Id: orfs2map.icn,v 0.1 1999/10/18 15:07:02 mccorkle Exp mccorkle $
d20 3
a22 2
link  io
link  math
d28 5
d40 4
d56 1
a56 5
                  then {
                        y := -0.3
                        if ( h.f < 0 )
                          then y := 1.0 - y
                       }
d65 4
a77 1
    write( "window 800 300 tras2map" )
d100 1
a100 1
   color_table[ "TAG" ] := "brown"
d147 28
@


0.1
log
@Just got this going.
@
text
@d10 1
a10 1
# Usage:        orfs2map <tras output file> 
d12 1
a12 1
#               if no file specified, stdin is used
d14 1
a14 1
# $Id$
d31 1
a31 1
    infile := open_f( args )
d36 23
a58 19
    while ( line := read( infile ) ) do
        if ( line ? match( ">" )  )
          then 
	   {
            if line ? ( h := tras_header() )
              then {
                    y := -0.3
                    if ( h.f < 0 )
                      then y := 1.0 - y
                   }
              else if line ? ( h := orfs_header() )
                      then y := 0.5
                      else stop( "bad header line " ||  line )

            if ( h.a > maxpos ) then maxpos := h.a
            if ( h.b > maxpos ) then maxpos := h.b
            write( "t_hline ", h.f, " ", h.a, " ", h.b, " ", y, " ",
                   color_table[ h.strt ], " # ", h.strt  )
	   }
d69 1
a69 1
    close( infile )
d71 1
a71 1
end
d73 1
a73 1
procedure open_f( args )
d75 4
a78 6
    local filename, infile
    if filename := args[1]
      then
        ( infile := open( filename )  | stop( "can't open ", filename ) )
      else
        infile := &input
d92 2
@
