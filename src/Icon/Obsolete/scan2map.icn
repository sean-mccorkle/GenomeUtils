# Program:      scan2map
# Programmer:   Sean R. McCorkle
# Language:     Icon
# Description:  Reads scanseq output and generates graphic map instructions
#               for view program
#
# Usage:        scan2map <scanseq file>
#
#               where <scanseq file> contains output from scanseq
#               If not specified, stdin is used.
#
# $Id$
#

global color_table

procedure main( args )

    local infile, l, line, seq_name

    initialize()

    infile := open_f( args )

    #
    # read the file, put information into globals, tables, etc
    #
    line := read( infile )
    ( line ? (tab( match( "Scan sequence: " ) ) &
              seq_name := line[&pos:0]) ) |
       stop( "not good file" )
    line := read( infile )
    ( line ? (tab( match( "Length: " ) ) & 
              length := tab( many( &digits ) ) )) |
       stop( "not good file" )

    write( "# View graphics instructions, generated by scan2map" )
    write( "# " )
    write( "window 800 300 ", seq_name )
    write( "tiers 3 3 20 20" )
    write( "scale 0 ", length )

    translate_signals( infile )
    skip_frequencies( infile )
    translate_orfs( infile )


end

procedure initialize()

   color_table := table( "black" )
   color_table[ "TAA" ] := "purple"
   color_table[ "TAG" ] := "brown"
   color_table[ "TGA" ] := "red"
   color_table[ "ATG" ] := "green"
   color_table[ "GTG" ] := "orange"

end

procedure open_f( args )

    local filename, infile
    if filename := args[1]
      then
        ( infile := open( filename )  | stop( "can't open ", filename ) )
      else
        infile := &input
    return( infile )

end

procedure translate_signals( infile )

    local line1, line, dir, frame, pos, type, sig, f, y1, y2

    line1 := read( infile )
    (line1 ? match( "Signals:" ) ) | stop( "no signal line found" )
    while ( (line := read( infile ) ) &
             not (line ? match( "Signal freq" ) )
          ) do
        {
         (line ? ( (dir := tab( match( "R" | "F" ) ) ) &
                   (frame := tab( match( 1 to 3 ) ) ) &
                   tab( many( " " ) ) &
                   (pos := tab( many( &digits ) ) ) &
                   tab( many( " " ) ) &
                   (signal := tab( match( "start" | "stop" ) ) ) &
                   tab( many( " " ) ) & 
                   (sig := tab( many( &letters ) ) )
                 )
         ) | stop( "bad signal line: [", signal, "]" )
         y1 := 0.0
         y2 := 0.5
         if ( signal == "start" ) 
           then { 
                 y1 := 0.5
                 y2 := 1.0
                }
         if ( dir == "R" ) 
           then { 
                 y1 := 1.0 - y1
                 y2 := 1.0 - y2
                 frame := -frame
                }
         write( "t_vline ", frame, " ", pos, " ", y1, " ", y2, " ", 
                color_table[ sig ], "  # ", signal, "  ", sig )
	}

end

procedure skip_frequencies( infile )

    local line

    while ( (line := read( infile )) & not line ? match( "ORFs:" ) )
            
end

procedure translate_orfs( infile )

    local line, dir, f, pos, length, stp, strt

    while ( line := read( infile ) ) do
        if ( line ? match( ">" )  )
          then 
	   {
            (line ? ( tab( match( ">" ) ) &
                     ( dir := tab( any( "RF" ) ) ) &
                     ( f := tab( any( "123" ) ) ) &
                     tab( match( "-" ) ) &
                     ( pos := tab( many( &digits ) ) ) &
                     tab( match( "-" ) ) &
                     ( length := tab( many( &digits ) ) ) &
                     tab( match( "-" ) ) &
                     ( stp := tab( many( "ACGT" ) ) )
                   ) ) | stop( "bad header line " ||  line )

            strt := line[1+:3]
            if ( dir == "R" ) 
              then f := -f
            write( "t_hline ", f, " ", pos, " ", pos + length, " ", 0.5, " ",
                   color_table[ strt ], " # ", strt, " - ", stp )
	   }
    
end
