# Program:      viewscan
# Programmer:   Sean R. McCorkle
# Language:     Icon
# Description:  Reads scanseq output and displays results graphically
#
# Usage:        viewseq <scanseq file>
#
#               where <scanseq file> contains output from scanseq
#               If not specified, stdin is used.
#
# $Id: viewscan.icn,v 0.2 1999/10/10 20:22:25 mccorkle Exp mccorkle $
#

link   graf

record signal_rec( pos, signal )
record orf_rec( pos, len, start, stop )

global orfs
global starts
global stops
global length
global color_table

procedure main( args )

    local infile, l, line, seq_name

    infile := open_f( args )

    #
    # read the file, put information into globals, tables, etc
    #
    line := read( infile )
    ( line ? (tab( match( "Scan sequence: " ) ) &
              seq_name := line[&pos:0]) ) |
       stop( "not good file" )
    line := read( infile )
    ( line ? (tab( match( "Length: " ) ) & 
              length := tab( many( &digits ) ) )) |
       stop( "not good file" )
    #write( "length ", length )

    get_signals( infile )
    get_frequencies( infile )
    get_orfs( infile )
    #write_orfs()

    # 
    # Okay, now display the data on an Xwindow, and wait for user events
    # and handle them
    #
    create_window( seq_name )
    draw_display()
    handle_user_events()

end

procedure open_f( args )

    local filename, infile
    if filename := args[1]
      then
        ( infile := open( filename )  | stop( "can't open ", filename ) )
      else
        infile := &input
    return( infile )

end

procedure get_signals( infile )

    local line1, line, frame, pos, type, sig, f

    starts := table()
    stops  := table()
    every f := ("R" | "F") || (1 to 3)  do
       {
        starts[f] := []
        stops[f] := []
       }

    line1 := read( infile )
    (line1 ? match( "Signals:" ) ) | stop( "no signal line found" )
    while ( (line := read( infile ) ) &
             not (line ? match( "Signal freq" ) )
          ) do
        {
         (line ? ( (frame := tab( match( ("R"|"F") || (1 to 3) ) ) ) &
                   tab( many( " " ) ) &
                   (pos := tab( many( &digits ) ) ) &
                   tab( many( " " ) ) &
                   (signal := tab( match( "start" | "stop" ) ) ) &
                   tab( many( " " ) ) & 
                   (sig := tab( many( &letters ) ) )
                 )
         ) | stop( "bad signal line: [", signal, "]" )
         if ( signal == "start" )
             then push( starts[ frame ], signal_rec( pos, sig ) )
             else push( stops[ frame ], signal_rec( pos, sig ) )
         #write( frame, " ", pos, " ", signal, " ", stp )
	}

end

procedure get_frequencies( infile )

    local line

    while ( (line := read( infile )) & not line ? match( "ORFs:" ) )
            
end

procedure get_orfs( infile )

    local line, dir, f, pos, length, stp

    orfs := table()
    every ( orfs[ ("R" | "F") || (1 to 3) ] := [] )

    while ( line := read( infile ) ) do
        if ( line ? match( ">" )  )
          then 
	   {
            (line ? ( tab( match( ">" ) ) &
                     ( dir := tab( any( "RF" ) ) ) &
                     ( f := tab( any( "123" ) ) ) &
                     tab( match( "-" ) ) &
                     ( pos := tab( many( &digits ) ) ) &
                     tab( match( "-" ) ) &
                     ( length := tab( many( &digits ) ) ) &
                     tab( match( "-" ) ) &
                     ( stp := tab( many( "ACGT" ) ) )
                   ) ) | stop( "bad header line " ||  line )
            line := read( infile )
            strt := line[1+:3]
            #write( dir, "  ", f, "  ", pos, "  ", length, "  ",stp, " " strt )
            push( orfs[ dir || f ], orf_rec( pos, length, strt, stp ) )
	   }
    
end

procedure write_orfs()

    local o, f
    every ( o := !orfs[ f := ("R" | "F") || (1 to 3) ] ) do
        write( f, " ", right( o.pos, 8 ), right( o.len, 8 ), "  ",
               o.start, "  ", o.stop )
end

procedure create_window( t )

    init_color_table()
    open_window( 800, 300, "viewcan: " || t )
    set_tiers( 3, 3, 20, 20 )
    set_scale( 0, length )

end

#
#  This procedure opens up the Xwindow display and draws all the graphics
#
procedure draw_display()

    local f, o, s

    WAttrib( "drawop=copy" )
    EraseArea( 0, 0 )
    draw_scale( "red" )
    #
    # forward (top frames) - starts on top, stops on bottom
    # 
    every ( s := !starts[ "F" || ( f := 1 to 3 )  ] ) do
        tier_line_vert( f, s.pos, 0.5, 1.0, color_table[ s.signal ] )
    every ( s := !stops[ "F" || ( f := 1 to 3 )  ] ) do
        tier_line_vert( f, s.pos, 0.0, 0.5, color_table[ s.signal ] )
    #
    # reverse (bottom frames) - starts on bottom, stops on top
    # 
    every ( s := !starts[ "R" || ( f := 1 to 3 )  ] ) do
        tier_line_vert( -f, s.pos, 0.0, 0.5, color_table[ s.signal ] )
    every ( s := !stops[ "R" || ( f := 1 to 3 )  ] ) do
        tier_line_vert( -f, s.pos, 0.5, 1.0, color_table[ s.signal ] )


    every ( o := !orfs[ "F" || ( f := 1 to 3 )  ] ) do
        tier_line_horiz( f, o.pos, o.pos + o.len, 0.5, color_table[ o.start ] )
    every ( o := !orfs[ "R" || ( f := 1 to 3 )  ] ) do
        tier_line_horiz( -f, o.pos, o.pos + o.len, 0.5, color_table[ o.start ])

    WAttrib( "drawop=reverse" )
end


procedure  handle_user_events()

    local x, l

    repeat
       {
        case Event() of
	   {
            "q" | "Q": break
            "o" | "O": {
                        set_scale( 0, length )
                        draw_display()                        
	               }
            "r" | "R":  draw_display()

            &rpress:    highlight_scale( x := &x, l := 0 )

            &rdrag:    {
                        highlight_scale( x, l )
                        highlight_scale( x, l := &x - x )
                       }
            &rrelease: {
                        set_scale( unmap_x( x ), unmap_x( x + l ) )
                        draw_display()                        
                       }
	   }
       }
end



procedure  init_color_table()

   color_table := table( "black" )
   color_table[ "TAA" ] := "purple"
   color_table[ "TAG" ] := "brown"
   color_table[ "TGA" ] := "red"
   color_table[ "ATG" ] := "green"
   color_table[ "GTG" ] := "orange"

end




