#!/usr/bin/perl
# Program:     extract_sequences_list
# Programmer:  Sean R. McCorkle
#              Biological, Environmental and Climate Sciences Dept.
#              Brookhaven National Laboratory
# Language:    perl
# 
# Description: Reads a list of identifiers from a file, one per line.
#              Then passes any fasta sequences whose headers start with
#              any of those ids (assuming the id is the first whitespace
#              separated entry on the header.  In the case of fastq format
#              sequences, trailing /1 or /2 is first removed from the ID)
#              
# Usage:       extract_sequences_list  [-u] [-v] <wanted_list>  [seqs...]
#
# Options:      -u  unique - don't repeatedly pass the same sequence if it
#                   recurs 
#               -v  complementary sense - DON'T pass the sequence if its 
#                   found in the list
#               -Q  input files are fastq, not fasta (output fastq as well)
#
use strict;

our ( $opt_Q, $opt_u, $opt_v );

use Getopt::Std;

getopts( "Quv" ) || die "Bad option: only -Q, -v or -u recognized\n";

my %want = get_list( (shift) );
my %have;

my $pass = 0;

if ( $opt_Q )                      # if FASTQ format
   {
    while ( $_ = <> )   # get record
       {
        if ( /^@/ )        # if header, 
           { 
            $hdr = $_; 
            $hdr =~ /^@(\S+)(\/[12])?/;   # get ID & figure out if we print it or not
            $pass = $want{$1}; 
            $pass = ! $pass if ( $opt_v );
            $pass = 0 if ( $opt_u && $pass && $have{$1} );
            #undef( $want{$1} ) if ( $want{$1} && $opt_u );  # clear after first time
            $have{$1} = 1 if ( $opt_u && $pass );

           }
        else
           { die "does not look like FASTQ header: $_"; }
        ( $_ = <> ) || die "did not find FASTQ sequence line\n";    # now collect all records for 
        chomp;                                                      # this read
        $seq = $_;
        ( $_ = <> ) || die "did not find FASTQ quality header line\n";
        my $qhdr = $_;
        /^+/ || die "die find FASTQ quality header line\n"; 
        ( $_ = <> ) || die "did not find FASTQ quality line\n";
        my $qseq = $_;
        print $hdr, $seq, $qhdr, $qseq if ( $pass );                # and print if approriate
       }
   }
else                               # FASTA format  
   {
    while ( <> )
       {
        next if ( /^\s*$/ );
        if ( /^>(\S+)+/ )
           { 
            $pass = $want{$1}; 
            $pass = ! $pass if ( $opt_v );
            $pass = 0 if ( $opt_u && $pass && $have{$1} );
            #undef( $want{$1} ) if ( $want{$1} && $opt_u );  # clear after first time
            $have{$1} = 1 if ( $opt_u && $pass );
           }
        print if ( $pass );
       }
   }


sub  get_list
   {
    my $file = shift;
    my %w = ();

    open( LIST, $file ) || die "Can't open $file: $!\n";
    while ( $_ = <LIST> )
       {
        chomp;
        s/^\s*//;
        s/\s*$//;
        $w{$_}++;
       }
    close( LIST );

    return( %w );
   }
