#!/usr/bin/perl
# Program:      connected_subgraphs
# Programmer:   Sean R. McCorkle, Biology Dept, Brookhaven National Laboratory
# Language:     perl 
# 
# Description:  Reads pairwise edges (node node) and outputs connected subgraphs
#
# Usage:        connected_subgraphs [-d] [-e] [-m<n>]  edge-data
#
#               where edge-data (files or stdin) are lines of the form
#
#                              a  b
#                              a  c
#                              b  d
#                              e  f
#
#               where the pairs indicate edges between nodes a, b, c, d, e, 
#               and f (this is assumed to be an undirected graph)
#
#               by default, subgraphs are printed one per line, all node 
#               members on one line
#
# Options:     -d    produce dotty or neato output (Bell Labs graphviz package)
#              -e    print edges on separate lines
#              -m<n> report no subgraphs with number of members < n
#
#
# $Id: connected_subgraphs,v 1.0 2009/01/02 17:36:42 mccorkle Exp mccorkle $
#
use Getopt::Std;


                                ################
                                # Main Program #
                                ################


die "bad option\n" unless ( getopts( 'dem:' ) );

$min_membs = $opt_m ? $opt_m : 1;

load_connections();

@subg = ();        # builds list of vertices in subgraph.  reset after output


dfs_traverse();


                                 ###############
                                 # Subroutines #
                                 ###############

sub  dfs_traverse
   {
    foreach my $v ( sort keys( %vert ) )
       {
        $state{$v} = "undiscovered";
       }
    foreach my $v ( sort keys( %vert ) )
       {
        if ( $state{$v} eq "undiscovered" )
          {
           dfs( $v );
           output_subgraph();
           @subg = ();
          }
       }
   }

sub  output_subgraph
   {
    my $vert_sep = $opt_d ? " ; " : " ";
    my $edge_sep = $opt_d ? " - " : " ";
    my $line_end = $opt_d ? ";" : "";
    if ( $#subg+1 >= $min_membs )
       {
        dotty_header() if $opt_d;

        # print all vertices on one line
        print "", join( $vert_sep, @subg ), $line_end, "\n";
        # dotty or edges option: print 
        if ( $opt_d || $opt_e )
           {
            foreach my $a ( @subg )
               {
                foreach my $b ( get_conns( $a ) )
                   {
                    if ( ! is_conn_printed( $a, $b ) )
                      {
                       print "   ", $a, "$edge_sep", $b, $line_end, "\n";
                       set_conn_printed( $a, $b );
                      }
                   }
               }
           }

        dotty_footer() if $opt_d;
       }
   }

sub  dfs
   {
    my $s = shift;
    $state{$s} = "discovered";
    #print " $s";
    push( @subg, $s );
    foreach $v ( sort keys ( %{$edges{$s}} ) )
       {
        if ( $state{$v} eq 'undiscovered' )
           { dfs( $v ); }
       }
    $state{$s} = "completely-explored";
   }

sub  load_connections
   {
    while ( <> )
       {
        next if ( /^\s*$/ );    # skip blank lines
        s/^\s*//;
        my ($a,$b) = split( /\s+/ );
        $vert{$a}++;
        $vert{$b}++;
        conn( $a, $b );
        conn( $b, $a );  #note: for directed graph, remove this 
                         #note:  probably ought to move this into conn()
       }
   }

# make a connection from a to b

sub  conn
   {
    my ($a, $b) = @_;
    $edges{$a} = {} unless( defined( $edges{$a} ) );
    ${$edges{$a}}{$b}++;
   }

# get_conns( $v ) - return all vertices with a connection from $v as a list

sub  get_conns
   {
    my $v = shift;
    return( sort keys( %{$edges{$v}} ) )
   }

sub  set_conn_printed
   {
    my ($a, $b) = @_;
    my ($a, $b) = @_;
    $printed_conns{$a} = {} unless( defined( $edges{$a} ) );
    ${$printed_conns{$a}}{$b}++;
    # for now, we handle undirected graphs this way
    $printed_conns{$b} = {} unless( defined( $edges{$b} ) );
    ${$printed_conns{$b}}{$a}++;
   }

sub  is_conn_printed
   {
    my ($a, $b) = @_;

    if ( defined( $printed_conns{$a} ) && defined( ${$printed_conns{$a}}{$b} ) )
      { return( 1 ); }
    if ( defined( $printed_conns{$b} ) && defined( ${$printed_conns{$b}}{$a} ) )
      { return( 1 ); }
    return( 0 );
   }

sub  dotty_header
   {
    print "graph G {\n";
   }

sub  dotty_footer
   {
    print "}\n";
   }
