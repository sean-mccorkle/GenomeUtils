#!/usr/bin/perl
#
# usage:  [-FPs]  fasta2md5  <seqfile> [...]
# 
# converts each fasta-format sequence to an md5sum 
# (after converting to uppercase) and prints it
#  out (along with the fasta header)
#
# Options:  -F   printout fasta sequences using md5 as header
#           -P   like -f but prepend md5 <space> to header
#           -s   use base64 md5, not hex
#
#
use strict;
use Digest::MD5 qw(md5_hex md5_base64);

our ( $opt_F, $opt_P, $opt_s );
use Getopt::Std;

getopts( "FPs" ) || die "Bad option, only -F, -P or -srecognized\n";


my $hdr;
my $seq = "";

my $line_len = 60;

while ( <> )
   {
    if ( /^>(.*)/ )
       {
        my $newhdr = $1;
        output( md5( $seq ), $hdr, $seq ) if ( $hdr && length( $seq ) > 0 );
        $hdr = $newhdr;
        $seq = "";
       }
    else
       {
        chomp;
        #s/[\s0-9]//g;
        s/\s//g;
        $seq .= uc( $_ );
       }
   }

output( md5( $seq ), $hdr, $seq ) if ( $hdr && length( $seq ) > 0 );


sub  md5
   {  
    my $seq = shift;
    $seq =~ s/\*$//;
    return( $opt_s ? md5_base64( $seq ) : md5_hex( $seq ) ); 
   }



sub  output
   {  
    my ( $md5, $hdr, $seq ) = @_;

    if ( $opt_P )
        { print_fasta( "$md5 $hdr", $seq ); }        
    elsif ( $opt_F )
        { print_fasta( $md5, $seq ); }
    else
        { print "$md5  $hdr\n"; }
   }


sub  print_fasta
   {
    my ( $hdr, $seq ) = @_;
    my $i;

    print ">$hdr\n";
    my $n = length( $seq );                       # calculate length once
    for ( $i = 0; $i < $n; $i++ )                 # for each character
       {
        print substr( $seq, $i, 1 );              # print it out
        if ( ( ($i + 1) % $line_len ) == 0 )      # every 50 characters
            { print "\n"; }                       #   put a newline
       }
    print "\n" if ( ( $i % $line_len ) != 0 );    # last newline ensures tidy 
                                                  #output
   }
