#!/usr/bin/perl
#
# Read DNA/RNA sequences in fasta format, print out counts
# and frequencies of codon usage.
#

use strict;


my %codons = (
               'A' => [ 'GCT', 'GCC', 'GCA', 'GCG' ],
               'R' => [ 'CGT', 'CGC', 'CGA', 'CGG', 'AGA', 'AGG' ],
               'N' => [ 'AAT', 'AAC' ],
               'D' => [ 'GAT', 'GAC' ],
               'C' => [ 'TGT', 'TGC' ],
               'Q' => [ 'CAA', 'CAG' ],
               'E' => [ 'GAA', 'GAG' ],
               'G' => [ 'GGT', 'GGC', 'GGA', 'GGG' ],
               'H' => [ 'CAT', 'CAC' ],
               'I' => [ 'ATT', 'ATC', 'ATA' ],
               'L' => [ 'TTA', 'TTG', 'CTT', 'CTC', 'CTA', 'CTG' ],
               'K' => [ 'AAA', 'AAG' ],
               'M' => [ 'ATG' ],
               'F' => [ 'TTT', 'TTC' ],
               'P' => [ 'CCT', 'CCC', 'CCA', 'CCG' ],
               'S' => [ 'TCT', 'TCC', 'TCA', 'TCG', 'AGT', 'AGC' ],
               'T' => [ 'ACT', 'ACC', 'ACA', 'ACG' ],
               'W' => [ 'TGG' ],
               'Y' => [ 'TAT', 'TAC' ],
               'V' => [ 'GTT', 'GTC', 'GTA', 'GTG' ],
               '*' => [ 'TAA', 'TGA', 'TAG' ],
             );

my %trans;     # trans{cod} == aa
my %freq;      # freq{cod} == number of occurences

create_trans();

my $seq;
my $hdr;
my $new_hdr;

while ( $_ = <> )
   {
    if ( /^>(.*)$/ )
       {
        $new_hdr = $1;
        count_codons( $hdr, $seq ) if ( defined( $hdr ) );
        $hdr = $new_hdr;
        $seq = "";
       }
    else
       {
        chomp;
        s/\s//g;
        $seq .= uc( $_ );
       }
   }

count_codons( $hdr, $seq ) if ( defined( $hdr ) );

report();



                                   ###############
                                   # Subroutines #
                                   ###############

#
# creates %trans from %codons,  where $trans{$codon} = $aa  
#
sub  create_trans
   {
    foreach my $aa ( keys( %codons ) )
       {
        foreach my $cod ( @{$codons{$aa}} )
           {
            die "already have " . $trans{$cod} . " for codon $cod: $aa\n" if ( $trans{$cod} );
            $trans{$cod} = $aa;  
           }
       }
   }


sub  count_codons
   {
    my ( $hdr, $seq ) = @_;
    my $len = length( $seq );
    #print ">$hdr\n";
    for ( my $i = 0; $i < $len; $i += 3 )
       {
        my $cod = substr( $seq, $i, 3 );
        next unless( $trans{$cod} );     # ignore things like N
        $freq{$cod}++;
        #print "$i $cod ", $trans{$cod}, "   ", $freq{$cod}, "\n";
       }
   }

sub  report
   {
    my @allcods = sort keys( %freq );
    my $tot = freqtot( @allcods );
    #foreach my $cod ( @allcods )
    foreach my $aa ( sort keys( %codons ) )
       {
        my @aacods = @{$codons{$aa}};
        my $aatot = freqtot( @aacods );
        foreach my $cod ( @aacods )
           { 
            printf "%s %s  %10d  %8.3f  %8.3f\n", 
                    $aa, $cod, $freq{$cod}, 100.0 * $freq{$cod} / $tot,
                    100.0 * $freq{$cod} / $aatot;
           }
       }

    # this might be a useful alternate output format, grouped on a single line:
    #foreach my $aa ( sort keys( %codons ) )
    #   {
    #    my @aacods = @{$codons{$aa}};
    #    my $aatot = freqtot( @aacods );
    #    print "$aa:  ";
    #    foreach my $cod ( @aacods )
    #       {
    #        printf "  $cod:%8.3f", 100.0 * $freq{$cod} / $aatot;
    #       }
    #    print "\n";
    #   }
   }


sub  freqtot
   {
    my $tot = 0.0;

    foreach my $cod ( @_ )
       {  $tot += $freq{$cod};  }
    return( $tot );
   }

sub  print_codons
   {
    print "  ", join( " ", @_ ), "\n";
   }
